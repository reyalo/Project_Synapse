
//! is_a_line_inside_a_line
int fn(int a, int b, int c, int d) //a=x1,b=y1,c=x2,d=y2
{
  if (a > b)
    swap(a, b);
  if (c > d)
    swap(c, d);

  if (c > a && c < b && (d > b || d < a))
    return 1;
  else if (d > a && d < b && (c > b || c < a))
    return 1;

  return 0;
}

//!time calculating

int fn2(string s){
  int t;
  t = 600 * fn(s[0]) + 60 * fn(s[1]) + 10 * fn(s[3]) + fn(s[4]);
  return t;
}

//!search array in range
int find(){
  vector<int> vec{10, 20, 30, 40};

  // Iterator used to store the position
  // of searched element
  vector<int>::iterator it;

  // Element to be searched
  int ser = 30;

  // find function call
  it = find(vec.begin(), vec.end(), ser);

  if (it != vec.end())
  {
    cout <<  ser << " found at position : ";
  }
  else
    cout << "Element not found.\n\n";

  return 0;
}
 // FInd in array a value
int main(){
  int c=91;
  int ar[] = {65, 69, 73, 79, 85, 97, 101, 105, 111, 117};
  
  if (find(begin(ar), end(ar), c) != end(ar))
  {
    cout << "YES" << endl;
  }
  else
  {
    cout << "NO" << endl;
  }
}  
//! point 3 theke point(1,2) er upor lombo bindur durtter borgo

double f(double x1, double y1, double x2, double y2, double x3, double y3)
{
  return (((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) * ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3))) / ((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}
// point1 and 2 bindur durotto
double dt(double x1, double y1, double x2, double y2)
{
  return ((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

//! leap year count
int leap_year_count(int n,int m){  //n>m or n<m
      int a=n/4-n/100+n/400;
      int b=m/4-m/100+m/400;
      
      return abs(a-b);
}



//! ____________________________________TWO POINTER______________________________________ 

//! 1.be careful in while(ix<n&&___condition___)
//! 2.at first dont code ix++/++ix, after accepted then transform in ix++/++ix,

1.head                 (propagation)
2.compare              (compred value comparisn)
3.tail                 (propagation)
4.calc



//!1___________two_pointer_bee_cha_method___________
//! 1.1 right const speed
void func(){  //! constant speed head propagate is more easy then constant tail
  
  //lrs=sum between left and right,cs=given condition sum,ans=INT_MIN/INT_MAX,a=sorter array;
  
  int l=0,r=0,ans=INT_MIN,cs=5;

  for (r = 0; r < n; r++)                              // head every time propagate but not tail
  {
    int lrs=a[r]-a[l];
    //! at first no l++ or ++l must not use
    //tail propagation   
    while (lrs>cs)lrs=a[r]-a[++l];                     // while (lrs>cs){l++;lr_sum=a[r]-a[l];}

    ans=max(ans,r-l+1);                                // taking answer.use either max() or min()
  }


  //!1.2 right const speed
  ll l=0;   k (compared value)
  fi(n){
    while(l<n&&a[i]-a[l]>k)l++;  // tail propagation,


    if(i-l>=2){                  // calculation
      sum+=((i-l)*(i-l-1))/2;
    }
    // cout<<i<<sp<<sum<<el;
  }
  

  //! constant tail
  fi(n){
    // it is more sensitive.be careful r<n check and lrs check inside while loop.
    lrs=a[r]-a[i];
    while(r+1<n && a[r+1]-a[i]<=k)r++;
    ans=max(ans,r-i+1);
    
  }
  cout<<ans<<endl;
}


void two_Pointer2(){
  int hi = 0, lo = 0;
  int mx = INT_MIN;
  for (int hi = 0; hi < n; hi++) // propagation of head
  {
    // calculating of between two pointer positions sum
    int ms = sum(lo, hi, b);

    // propagation of tail or lo.it is occur if for head propagation break the main condition(e.g.two pointer sum> given sum)
    if (ms > s)
    {
      while (ms != s)
      {
        lo++;
        ms = sum(lo, hi, b);
      }
    }
    // if two pointer fulfill the condition and two pointers difference is greater/less than previous recorded length
    // then also save two pointer position
    if (ms == s)
    {
      if (hi - lo + 1 > mx)
      {
        mx = hi - lo + 1;
        // here you can also save the position of max or mins two pointer position
      }
    }
  }
  cout << n - mx << endl;
}

void two_pointer_special(){
  ll l,r,ls=0,rs=0,ans=0,a[n];

  l=0,r=n-1;
  while(l-1<=r){  
    if(ls==rs){ans=max(ans,ls);ls+=a[l++],rs+=a[r--];}
    else {
      if(ls<rs)ls+=a[l++];
      else rs+=a[r--];
    }
  }
  //! this code also work
  while(l-1<=r){  
    if(ls==rs)ans=max(ans,ls);
    if(ls<rs)ls+=a[l++];
    else rs+=a[r--];
    
  }
}

void segment(){
  int n,a[n];

  fri(0, n - 1)
  {
    int j = i;

    while (++j < n - 1 && a[i] == a[j]){}

    if (a[j] - a[i] <= k && a[j] != a[i])ans += j - i;
      
    i = j - 1;
  }

  cout<<n-ans<<endl;
}

int product(int x)
{
  int prod = 1;
  while (x)
  {
    prod *= (x % 10);
    x /= 10;
  }
  return prod;
}

//! The number which digit has max product
int findNumber(int l, int r)
{
  // Converting both integers to strings
  string a = to_string(l);
  string b = to_string(r);

  // Let the current answer be r
  int ans = r;
  for (int i = 0; i < b.size(); i++)
  {
    if (b[i] == '0')
      continue;

    // Stores the current number having
    // current digit one less than current
    // digit in b
    string curr = b;
    curr[i] = ((curr[i] - '0') - 1) + '0';

    // Replace all following digits with 9
    // to maximise the product
    for (int j = i + 1; j < curr.size(); j++)
      curr[j] = '9';

    // Convert string to number
    int num = 0;
    for (auto c : curr)
      num = num * 10 + (c - '0');

    // Check if it lies in range and its product
    // is greater than max product
    if (num >= l && product(ans) < product(num))
      ans = num;
  }

  return ans;
}

//! kathi method 

void kathi1(){
  ll n,mid,a;
  fri(0,n){
      int j=i;
      ll sum=0;
      while(j<n&&sum+a[j]<=mid)sum+=a[j],j++;
      c++;
      i=max(i,j-1);     //! it is great code to prevent infinite loop
    }
}

#define m 1000010
vi primes;
bool siv[m];
void sieve()
{
    ll i, j;
    for (i=3; i<m; i+=2)       // not work with even number
        if(!siv[i])            // siv[i]=0? then into 
            for (j=i*i; j<m; j+=i+i)  // j+=i+i why??, j always be odd,i always be odd,so(i+j)=even,but (j+i+i)odd,
                siv[j]=1;
    primes.pb(2);
    for (i=3;i<m;i+=2)          // not work with even number
        if(!siv[i])primes.pb(i); //siv[i]=0?then i=prime
    return;
}
