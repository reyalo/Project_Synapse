for cp:
1.try not to make dynamic vector/array; it take more time
2.such pair hold i<j, etar mane holo same pair jeno duibar er beshi na hoy     <>
3. array max element 1e5 hole, ceck array size 1e5 er upor e nite hobe
4. ii type array,set,map or anything, 
    sort also according to second value
    just negative second value

###___________________________PowerFul Tools__________________________### editor zoom(ctrl + '+')

=> mod value 1~n:
    (given_v-1)%n+1;

0. without ceil(just add n-1)

1.goto done:;(same as assembly)

2.char() // string s=s+'a'+2;error show. correct s = s+char('a'+2);

3.auto   // not to be declare type,set automatically

4. Binary search          //It is only for checking answer for random input. not for array. 
                          // .result will get stuck in r.but original result is r+1(once upon a time was mid)
    ll l=1,r=1e18,m;
    while (l<=r)
    {
      m = (l+r)/2;
      // here determine result for value m.

      result < given_result ? l = m + 1 : r = m - 1;

    }
    cout<<r+1<<endl;
  
4.1 

4.1  arr = {3, 4, 5, 7};
      search value x ;

    lower_bound : 
          *lb(a.bn, a.en, 3) = 3
          *lb(a.bn, a.en, 2) = 3

          lb(a.bn, a.en, 8) = END

    explain: output is >= x;

    upper_bound :
          *ub(a.bn, a.en, 3) = 4;
          *ub(a.bn, a.en, 2) = 3;

          ub(a.bn, a.en, 7) = END;

    explain: output is > x;
    

only lb can perform all task















lower/upper_bound(a.bn,a.en,val)-a.bn return the index less then val
      if no match return n (upper)
      if no macth return 0 (lower)












3.whose arg type double(sqrt,.....),if call with integer value,add 1.0* it make these integer to double
      E.g. sqrt(1.0 * m[i] * m[i]


7.when input 10e5 time double data,must scanf because fastio not work here.

8.!! 
9. while(--c) if(c) valid but while(c--) if(c) not valid


11. overlap check: 
        ----------                 
-------             ----------

not overlap : if(c_h < given_l||c_l> given_h)

12. blank space count
    fi(n){
    if(s[i]=='*'){
      if(l)ab.pb(l);
      l=0;
    }
    else l++;
  }
  if(l)ab.pb(l);


13. min from many element
  if (min({nht, nho, nmt, nmo}) < 0)
            return false;

<>
###___________________________Number Theory__________________________###

1.mod by m
    1.map[0] be careful   
    2.map[m/2] be careful 

2. large number always string input

3.perfect number vs(vector string);
vs perfect_num = {"6", "28", "496", "8128", "33550336", "8589869056", "137438691328", "2305843008139952128", "2658455991569831744654692615953842176"};

4. a.2^k mod m ==0 , K(max)=log2(m)

5.iteration number like n,n/2,n/3,n/4,n/5,n/6,n/7,n/8,n/9.......
  It is called harmonic series
  complexity nlogn

6. unimodal permutation ( increasing and decreasing);
  n!-2^(n-1)

7. let two int number P and Q,
    if( P % Q == 0 ) then, P = p1^a1 * p2^a2 * p3^a3  and Q = p1^b1 * p2^b2 * p3^b3, 
    it can say, bi <= ai <> it must be true,
    



8.Eucludeian formula:

  =>   GCD(a,md) == GCD(a mod md, md);

  example:
    1.gcd(10, 6) == 2;
    
      gcd(10 % 6, 6) == gcd(4, 6) ==2

    2.gcd(12, 5) ==1;
      gcd(12 % 5, 5) == gcd( 2 , 5) ==1;



###__________________________Combinatrics & Permutation______________________________###


1. how many six digits number can be form where digits are in non-decending Order

Soln: (number of Different digits + total place -1) C (total Place)









###__________________________Vector all______________________________###







>>Vector Tricks:
  original queue is more fast than vector made queue 

arr[n] = INT_MAX; //! Its very very important for an array that means taken an extra element and set this INT_MIN or INT_MAX

>> 2D vector
    vector<vector<int>> a(row, vi(0));// row = row number
    
    //example of a fixed 2d vector a[n][n] with default_value -1;
      vvi a(n, vi(n,-1));
1.1 vector as queue:
    v.erase(v.bn);
    
    
1.2 sort(a.begin(),a.begin()+2*n,[](iii x,iii y){ // for triple integer
      return x.fi.se<y.fi.se;
    });
<>
1.3 n = unique(a.begin(), a.end()) - a.begin(); // remove contiguous element
		a.resize(n);  // create new size array.

2. vector as stack  
  a.erase(a.bn+x,a.bn+x+1);          // erasing

3. vector rotate
    rotate(a.bn,a.bn+3,a.bn+n); // if array starting from 0 index

    rotate(a.bn+1,a.bn+1+ix,a.bn+1+n); // if array starting from 1 index a.bn replace a.bn+1







###______________________________String __all_________________________________






trending:
    1.Subsequence problem of n^2 can be solve by nlogn time.
      just use set/vector for every character occurrence indeces

    2.hashing / knp / string matching :

      example:https://codeforces.com/problemset/problem/126/B
    


    

	string s="we shall over come";
	stirng t = "shall";

1. Inteeger <--> string
    stoi()                     // only for int not ll
    to_string()
2. s.insert(pos,"string")

2.1 t = s.substr(pos,len);    // pos=position ,len = length;
    t = s.substr(pos)         // create substr position to last
    see eg.1
    
3. int pos = s.find(t,pos+1); //if no match return -1; // for next occurrence

4. s.erase(pos,length)
5. s.back() //last character return 

6. s.pop_back() // delete last character
   s.erase(s.bn) // delete first character

7.1 getline(cin>>ws, s);  // taking with space method 1

  2.stirng s,temp_s;      // taking with space method 2

    cin>>temp_s;
    getline(cin,s);
    s=temp_s+s;

  3.scanf(" %[^\n]s",s); // for only c

8.  fflush(stdin);    // clear buffer in c
    int fflush(FILE * ostream);     //clear buffer in cpp

    fflush(stdout) or cout << flush  //scanf-printf or cout




<>
9. string to ll/double:{
  
    #include <sstream>
    string s = "12345.5";
    stringstream stringNumber(s);
    double x = 0;
    stringNumber >> x;
  }

10. specific character count
c=count(s.bn,s.en,'1');



11. string to word   // it can over come more than one space
    
    string s,wrd;
    getline(cin>>ws,s);

    istringstream ss(s);
    while(ss>>wrd)cout<<wrd<<el; <>
    
12. printf string in cpp
    printf("%s",s.c_str());

13. string all lowercase
    transform(s.begin(), s.end(), s.begin(), ::tolower);


14. n = unique(a.begin(), a.end()) - a.begin(); // remove contiguous element
		a.resize(n);  // create new size array.

    ###raw_code:
    int ch=0,n=s.sz;string s="AABBAABB",t;
    fi(n){
      if(ch!=s[i]){
        ch=s[i];
        t+=s[i];
      }
    }








###_____________________END STRING_________________________###

//!####_______________________MAP_______________________________###









1. Mapping: map<index,Value> // its power is it can randomly set array-index;

1.1 map key check
    mm.count(key);

2. 	int n;   										// total number of value input
    cin>>n;  
    mii mpi; 										// define a map<int,int> which name mpi
    mitr it; 										// define a iterator
    
    
    for (int i = 0; i < n; i++)                      // taking input map value
    {
      cin>>tmp;
      mpi[tmp]++;
    }
    for ( it = mpi.begin(); it != mpi.end(); it++)   // iterating or travarsing every value
    {
      cout<<it->fi<<" "<<it->se<<endl;
    }
    cout<<"size of map "<<mpi.size()<<endl;          // size of map

3.  mp.find(b)!=mp.end() // searching map element


4.erase map first and last element
    while (a.size() > m) {
			a.erase(--a.end());
		}
    while (a.size() > m) {
			a.erase(a.begin());
		}
    







####____________________________END MAP_________________________###








####____________________________ SET _________________________###


***!note[std::map, std::multimap, std::set, and std::multiset iterators are not random access, and
    so their member lower_bound functions should be preferred.]

multiset:
    st.erase(x)// delete all occurrence
    st.erase(st.find(x)) delte single element

    
*** set also can be used for priority queue.





####____________________________END SET_________________________###



####____________________________FUNCTION & LAMBDA___________________####



1.  auto func_name = []  (int a, int b) -> int {
      retrun a+b;
    };

same as:
  int func_name(int a,int b){
    return a+b;
  }

2.
    auto func_name = []  (int a, int b){
      retrun a+b;
    };

same as:
  auto func_name(int a,int b){
    return a+b;
  }


###___________________________________BINARY_SSERCH________________________####

int l=-1,r=1e10; // l and r maximum 1 out of bound

1.                                // best and easy to understand
  while(l+1<r){    <>
    int md=(l+r)/2;
    if(fn(md)){
      l=md;
    }else r=md;
  }
ans=l;

2.while(l<=r){                     <>
  int md=(l+r)/2;
  if(fn(md)){
    ans=md;
    l=md+1;
  }else r=md-1;
}
ans1=ans;
ans2=r;

3. while(l<r){                       <>
  int md=(l+r+1)/2;    // be careful adding 1 otherwise it will fall in infinte loop
  if(fn(md)){
    l=md;
  }else r=md-1;
}
ans1=l;
ans2=r;


characteristic of method 1:
break: l+1=r
l    : l tense to valid ans
r    : r tense to least invalid ans and always hold invalid ans


characteristic of method 2:
break: l>r or l-1=r  
l    : l tense to least invalid ans and finaly hold invalid ans
r    : r tense to valid ans


characteristic of method 3:
break: l==r 
l    : l tense to valid ans 
r    : r tense to valid ans
md   : md=(l+r+1)/2


*** some succesful brilliant code:
  1.
  l=-1,r=n+1                // l and r out boundary
  cond->l+l<r                 <>
  https://codeforces.com/contest/1183/submission/221021073


*** fractional binary search e (expression)< 10^-6 erokom thakle<>
    break condition diba 
    code:

    if((md-l)/max(1.0,md)<=0.0000001)   // 10^-6 er jonno
    break;

que:
    if valid ans come from infinite to down, what will be the code??

    sol:
    by using method 1:

                while(l+1<r){    <>
                  int md = (l + r) / 2;

                  if(!fn( md )){
                    l = md;
                  }else r = md;
                }
                ans = r; // also ans = l+1;

  [explaination1:
      1. l lower theke upper dike niye jete thkabo jotokkhon porjonto invalid ans pabo
      2. l always hold invalid ans
      3. so obiusly r hold valid ans

  explaination2:

      1. if mid is valid than mid <= all value also valid.
      2. our target is to compress r value to low.
      3. so we have to set right bound r = mid if mid valid.
      4. when fn() return true than execute else portion and set r = mid.
  
  
  ]

####___________________________________END_BINARY_SEARCH_______________________________####




####___________________________________TWO_POINTER_BOUNDARY_PROBLEM_______________________________####


mehtod 1: same as lb and ub

        _____
      0 1 2 3 4 5
        ^     ^
        l     r

    l = left boundary , r = right boundary +1 ;


    code:

        
        fi(1, n+1)         // travarsing each element index of array (here 1 base index)
        {

          while( r <= max_ix_of_array and valid( a[r] ) ) include(a[r++]);


          valid_range_len = r - l;

        }



method 2:








####___________________________________END_TWO_POINTER_BOUNDARY_PROBLEM_______________________________####






####___________________________________DP_______________________________####

dp table two type: 1. dp[x][n+1] give final ans, 2.sp[x][n+1] give final result

*** new tricks: if possible make small dp table by brute force then make it, observe how update value;



0.type 1:
  1.first base case design.
  2.for every i, update all index jegulute i theke kuno na kuno vabe jaua jay.
  3.updat can be min,max or number of away.


type 2:
  => number of choice in each day k;
  => can not take same task two consecutive day;
  
  1. first base case dp[0][0],dp[0][1],dp[0][2].........dp[0][k];
  2. then 2D array dp[n][k+1]     // k+1 need when nothing is select in i days
  3. remember teqnique or see before code
type 3:
  => take (weight/coin/number of stone) one time from set A ={a1,a2,a3};
  => update from upper cell,corner cell(upper left cell);


type 4:
  => take (weight/coin/number of stone) k time from set A ={a1,a2,a3},K ={k1,k2,k3};
  => update from upper cell,
      corner cell(upper left cell) using for loop of coin (a1*k1);

tpye 5:
  => take (weight/coin/number of stone) any number of time from set A ={a1,a2,a3};
  => update from upper cell,left cell,corner cell(upper left cell);


type 6: 1D two turn ( game theroy)
  => problem https://codeforces.com/problemset/problem/1418/C show first,






1.when dp can be apply???
  e.g. 1 2 3 4 5 an array and every combination should be check
  then there should be 2^n times check. For n>20 it is veru huge.
  YAAA :) the soulution is DP :)

example: 
befor see this must understand the algorithm

not optimized:
https://codeforces.com/problemset/submission/698/217978400

optimized:
https://codeforces.com/problemset/submission/698/217979190

https://codeforces.com/problemset/submission/1380/223096943


type1:
      template
        https://atcoder.jp/contests/dp/submissions/45991949 (just k change)

      e.g.
        https://atcoder.jp/contests/dp/tasks/dp_a
        https://atcoder.jp/contests/dp/tasks/dp_b

type2:
    template:
      https://atcoder.jp/contests/dp/submissions/45992687
    e.g.
      https://atcoder.jp/contests/dp/tasks/dp_c

tpye5:
    template:
      https://atcoder.jp/contests/dp/submissions/46191563 (1D)
    e.g.
      https://atcoder.jp/contests/dp/tasks/dp_k


      


####___________________________________END_DP_______________________________####




####___________________________________THE_GREAT_OBSERVATION_______________________________####

  prerequesties:
    1. problem should ad-hoc
    2. problems difficulty should be in range of easy.
    3. if any possibl *SWAP*
    

  step:
    1. puro problem porte hobe koyekbar
    2. just ekta sutur naal ber koro, baki ta emnitei ber hoye jabe;
    3. prothome general test case niye chinta koro, last e conrner case niye chinta koro
    4. onnekkhon vabar por o jodi sutar naal na pau tahole abar puro problem ta poro,
    5. brain e cycle steal calau ( fake smoking, pen rotation in finger....) ta na hole brain e jaam bedhe jabe,matha betha suru korbe,ebong brain effectiveness kome jabe
    6. problem 100% solve hote hobe emon kuno baddobadhokota nei, tobe % joto barano jay toto valo.
    7. kuno task vabte gele jodi mathay jaam hoye jay, tahole otake small task e vaag kore nau,
    8. code joto venge venge likha jay toto venge venge likhbe,
    9. 








  1. maximum segment sum of an array:
    => presum the array
    => To maximize it the sum, consider all right borders and minimum value current to left





####___________________________________END_THE_GREAT_OBSERVATION_______________________________####


@dynamic array int *array = new int[n];n = size of array;
                    int *array{ new int[length]{} }; // intializing with 0;
                    delete[] array;
                    
@partial sort:sort(arr.begin()+st,arr.begin()+ed+1);   // st= vector part start index,ed= vector part stop index
@find out max :max(a,b);



@ memset globally could not work
@ if globally two 2D array delcared and memset one,one could(modal) affect another.

@ Memset
    1.It only works for 0,-1,char;
    2.memset(a,-1/0/true/"t",sizeof(a)); // here a is array or string and true use only for bool array

@max: max_element(arr,arr+26) = return max element address.// be careful on arr+26,
      *max_element(arr,arr+26) = return max element Value.
@ Multiple return:
  1.struct/class
  2.tuple


  
@call by 2D function


double pi=2*acos(0.0);
double pi=acos(-1.0);
mod=abs();
fabs();


@ BITSET COUNT
  bitset<16> b;//number of total bit
  b =15;
  cout<<b.count();
 






### segment calculation(https://codeforces.com/blog/entry/76352)
### powerful stack using https://codeforces.com/problemset/problem/1104/B
    
    
### Manually update vscode:
    1.first download latest version from official site.
    2.open terminal inside download folder
    3.sudo dpkg -i code_1.62.3-1637137107_amd64.deb




<>### sliding window:
    
    template:

    int cnt = 0,l=0;
    fi(n)
    {
      if(s[i] != ss[i])   // head increase
        cnt++;

      if(i>=k){
        
        l++;     // tail decrease

      }
      
      if(i>=k-1){
        ans = min(ans, cnt);
      }
    }










### cycle array:
    vi a(2*n);
    fi(n)cin>>a[i],a[i+n]=a[i];

### most distance between two same elelment 
    fi(2*n){
          a[i]==mn?cnt=0:cnt++;
          mx=max(mx,cnt);
    }








eg.1:
  int pos=-1;
  fi(s.sz){
    i=s.find(t,i);
    if(i==-1)break;
    a[i+1]=1;
  }
  while(1){
    pos=s.find(t,pos+1);
    if(pos==-1)break;
    a[pos+1]=1;
  }

  
//!similar task:
e.g.
fi(n){
  ix=i;
  while(ix+1<n&&s[ix+1]==s[ix])ix++;
  
  i=ix;
}


ix=0;
fi(n){
  if(s[i]==s[ix])cnt++;

  else cnt=0,ix=i,i--;

}


###__________________________________________error________________________________________________

1. runtime error:
      It is two type:
      1.cause for positive indexing ( soln: calculate max index can occur)
      2.cause for negative indexing ( soln: it for int overflow, use long long)











###________________________________________bitwise operation____________________________________________

*** XOR :
      1. a (xor) b <= a+b





###_________________________________________Jibon_theke_neya____________________________
  *
  1. agei ei chinta korbe na je solution ki hobe, kivabe hobe.

  2. prothome kata chera korte hobe 10-15 minute. 

  3. erpor sutar naal paua jabe hoyto koyekta. 

  4. sei sutar naal dhore aagate hobe.

  5. je pothe agacci sei poth ta vul naki sothik ta vabar dorkar nai.
  *
  6. puruta implement korar por vul holeu somossa nai.

  7. karon ete notun idea asbe.
  ***
  8. no space optimization (239471462 ei code ta space optimization korte giye 3 hours time waste hoyeche)
  **
  9. dp always venge venge korba, eta vul houar possibility kome jabe.
  **
  9. sob code sobsomoy boro kore korba, venge venge korba

1 0. deadlock e pore gele( mane onk problem but kunta aage korbo bujtesi na) vul kichu diyei suru kore dau.
1 1. karon manush onner vul ta sohoze dhorte pare.

****
1 2. for presum must use 1 base index;
***
1 3. for some problem, ekta result x sotto bole assume kore suttro banate hoy,seshe true/false match korate hoy
      (onekta proof by contrapositive/contradict)
      



###___________________________________DURING_CONTEST______________________________________

  1. when implement idea, that time also think and note down about all possible "Confusion (error)"
  2. solution can be found, one of 2 or more way, but still implement the idea.
  3. 











██████╗░░███████╗░██╗░░░██╗░░█████╗░░██╗░░░░░░░██████╗░
██╔══██╗░██╔════╝░╚██╗░██╔╝░██╔══██╗░██║░░░░░░██╔═══██╗░
██████╔╝░█████╗░░░░╚████╔╝░░███████║░██║░░░░░░██║░░░██║░
██╔══██╗░██╔══╝░░░░░╚██╔╝░░░██╔══██║░██║░░░░░░██║░░░██║░
██║░░██║░███████╗░░░░██║░░░░██║░░██║░███████╗░╚██████╔╝░
╚═╝░░╚═╝░╚══════╝░░░░╚═╝░░░░╚═╝░░╚═╝░╚══════╝░░╚═════╝░


░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░██████╗░░███████╗░██╗░░░██╗░░█████╗░░██╗░░░░░░░██████╗░░░░
░░░██╔══██╗░██╔════╝░║██╗░██╔╝░██╔══██╗░██║░░░░░░██╔═══██╗░░░
░░░██║  ██║░██║     ░╚██║░██║ ░██║  ██║░██║░░░░░░██║   ██║░░░
░░░██████╔╝░█████╗░░░░╚████╔╝░░███████║░██║░░░░░░██║░░░██║░░░
░░░██╔══██╗░██╔══╝░░░░░║██╔╝░░░██╔══██║░██║░░░░░░██║░░░██║░░░
░░░██║  ██║░██║   ░░░░░╚██║ ░░░██║  ██║░██║░░░░░░██║░░░██║░░░
░░░██║░░██║░███████╗░░░░██║░░░░██║░░██║░███████╗░╚██████╔╝░░░
░░░╚═╝░░╚═╝░╚══════╝░░░░╚═╝░░░░╚═╝░░╚═╝░╚══════╝░░╚═════╝░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

https://texteditor.com/multiline-text-art/

